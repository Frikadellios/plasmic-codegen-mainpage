// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f6qpwMfQ9K36cBNMUgXnEq
// Component: HFux9EgRGbwa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Stars from "../../Stars"; // plasmic-import: xxzGR4cVlh/component
import StarsCss from "../../StarsCss"; // plasmic-import: T-OeE2cFzE/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Privetuliki from "../../Privetuliki"; // plasmic-import: VzDk-VkliN/component
import AstronautHi from "../../AstronautHi"; // plasmic-import: tfnwE5lHTJ/component
import WhiteBall from "../../WhiteBall"; // plasmic-import: r6qxN859iq/component
import Sphere from "../../Sphere"; // plasmic-import: XAziiQ95-x/component
import Loader from "../../Loader"; // plasmic-import: 3qY4GfQc1b/component
import Button2 from "../../Button2"; // plasmic-import: cTVB2-yynO/component
import Button3 from "../../Button3"; // plasmic-import: c2LEbxsUnrC/component

import { useScreenVariants as useScreenVariants_22FxKeis49Lo1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 22FxKeis49Lo1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: f6qpwMfQ9K36cBNMUgXnEq/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HFux9EgRGbwa/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: cOM0Xj8OAL4/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: yn2jSKPHp_D/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  stars?: p.Flex<typeof Stars>;
  starsCss?: p.Flex<typeof StarsCss>;
  navigationBar?: p.Flex<typeof NavigationBar>;
  img?: p.Flex<typeof p.PlasmicImg>;
  section?: p.Flex<"section">;
  privetuliki?: p.Flex<typeof Privetuliki>;
  astronautHi?: p.Flex<typeof AstronautHi>;
  h1?: p.Flex<"h1">;
  footer?: p.Flex<"footer">;
  sphere?: p.Flex<typeof Sphere>;
  loader?: p.Flex<typeof Loader>;
  button2?: p.Flex<typeof Button2>;
  button?: p.Flex<"button">;
  button3?: p.Flex<typeof Button3>;
  columns?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_22FxKeis49Lo1()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              sty.root
            )}
          >
            {true ? (
              <Stars
                data-plasmic-name={"stars"}
                data-plasmic-override={overrides.stars}
                bgLightness={0.06 as const}
                className={classNames("__wab_instance", sty.stars)}
                forcePreview={true}
                numStars={50 as const}
                starSize={0.2 as const}
              />
            ) : null}
            {true ? (
              <StarsCss
                data-plasmic-name={"starsCss"}
                data-plasmic-override={overrides.starsCss}
                className={classNames("__wab_instance", sty.starsCss)}
              />
            ) : null}

            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___1OdHd
                  )}
                  component={Link}
                  href={`/home`}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"100px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"100px" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/blank_project/images/logopit1677881020485Png.png",
                      fullWidth: 720,
                      fullHeight: 720,
                      aspectRatio: undefined
                    }}
                  />
                </p.PlasmicLink>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___3WroF)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              itemsGap={8 as const}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__xFd8
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"Home"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___7NUrL
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"About"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__vxeDr
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"Contact"}
                  </p.PlasmicLink>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rKUa)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/menu.svg" as const}
                />
              }
              responsiveBreakpoint={768 as const}
            />

            <p.Stack
              as={"section"}
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              hasGap={true}
              className={classNames(projectcss.all, sty.section)}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__tQdFo)}
                triggerOnce={true}
              >
                <Privetuliki
                  data-plasmic-name={"privetuliki"}
                  data-plasmic-override={overrides.privetuliki}
                  className={classNames("__wab_instance", sty.privetuliki)}
                />

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <AstronautHi
                    data-plasmic-name={"astronautHi"}
                    data-plasmic-override={overrides.astronautHi}
                    className={classNames("__wab_instance", sty.astronautHi)}
                  />
                ) : null}
              </Reveal>

              <Reveal
                className={classNames("__wab_instance", sty.reveal__yLuTm)}
                triggerOnce={true}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1,
                    "loadering" as const
                  )}
                >
                  {"Вітаю Вас!"}
                </h1>
              </Reveal>
            </p.Stack>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__gmhAg)}>
                <div className={classNames(projectcss.all, sty.freeBox__wTv7M)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kSpZp)}
                    >
                      <WhiteBall
                        className={classNames(
                          "__wab_instance",
                          sty.whiteBall__yvhsF
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d6HFy
                        )}
                      >
                        {"1"}
                      </div>
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox___3RcbX)}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__bFlE)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__wgUvz,
                      "root" as const
                    )}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__h94Z,
                        "loadering" as const
                      )}
                    >
                      {"Enter some text"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___5T9Uh,
                      "root" as const
                    )}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__oizFj,
                        "loadering" as const
                      )}
                    >
                      {"Enter some text"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__nT1RN,
                      "root" as const
                    )}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__gpVDs,
                        "loadering" as const
                      )}
                    >
                      {"Enter some text"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__yi4Da,
                      "root" as const
                    )}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___8Ntcm,
                        "loadering" as const
                      )}
                    >
                      {"Enter some text"}
                    </h2>
                  </div>
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__s39Y)}>
                <div className={classNames(projectcss.all, sty.freeBox__lZr3U)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___3MTap,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gamgG
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___3Z4K,
                      "root" as const
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__uv9Zz,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zxFld
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__q6B0K,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uPQoI
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___6SrGd)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sYUoU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pg7Zl
                        )}
                      >
                        {"2\n"}
                      </div>

                      <WhiteBall
                        className={classNames(
                          "__wab_instance",
                          sty.whiteBall__cXcbz
                        )}
                      />
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox___90PJ)}
                  />
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___07Jhb)}>
                <div className={classNames(projectcss.all, sty.freeBox__xqIn1)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uO43Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Vjg1
                        )}
                      >
                        {"3\n"}
                      </div>

                      <WhiteBall
                        className={classNames(
                          "__wab_instance",
                          sty.whiteBall__zdoJx
                        )}
                      />
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox___4XCcr)}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__w6N41)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__gmpNu,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yrbp
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__kjJq3,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1GTpb
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__wgkPw,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cYmYi
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__lSon7,
                      "root" as const
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Sh5K
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__eY28)}>
              <p.Stack
                as={"footer"}
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                hasGap={true}
                className={classNames(projectcss.all, sty.footer)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5UgxT)}
                >
                  <Sphere
                    data-plasmic-name={"sphere"}
                    data-plasmic-override={overrides.sphere}
                    className={classNames("__wab_instance", sty.sphere)}
                  />

                  <Loader
                    data-plasmic-name={"loader"}
                    data-plasmic-override={overrides.loader}
                    className={classNames("__wab_instance", sty.loader)}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3Q0X)}
                  >
                    <Button2
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2)}
                    />
                  </p.Stack>

                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m90Sb)}
                    >
                      <button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button
                        )}
                      >
                        {"Sign up"}
                      </button>

                      {true ? (
                        <Button3
                          data-plasmic-name={"button3"}
                          data-plasmic-override={overrides.button3}
                          className={classNames("__wab_instance", sty.button3)}
                          color={"clear" as const}
                          endIcon={
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bPbyL
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xCnim
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yu2NM
                            )}
                          >
                            {"Log in"}
                          </div>
                        </Button3>
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__ajAs3)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fE72E)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tPnmc
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__eHeG,
                            "loadering" as const
                          )}
                        >
                          {"Connect with us"}
                        </h2>
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___3COw)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bvIkk)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___9VtLi,
                          "loadering" as const
                        )}
                      >
                        {"Product"}
                      </h2>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___5L788)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gTch9)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__uzXgi,
                          "loadering" as const
                        )}
                      >
                        {"Support"}
                      </h2>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__wDv4M)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wwLs)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__cTeau,
                          "loadering" as const
                        )}
                      >
                        {"Company"}
                      </h2>
                    </p.Stack>
                  </div>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__d5Gko)}
                  />
                ) : null}
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__wF1Z)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___639E2,
                    "" as const
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Зроблено в Україні.\n Усі права захищені © 2017-2023"
                    : "Зроблено в Україні. Усі права захищені © 2017-2023"}
                </div>
              </div>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "stars",
    "starsCss",
    "navigationBar",
    "img",
    "section",
    "privetuliki",
    "astronautHi",
    "h1",
    "footer",
    "sphere",
    "loader",
    "button2",
    "button",
    "button3",
    "columns"
  ],
  stars: ["stars"],
  starsCss: ["starsCss"],
  navigationBar: ["navigationBar", "img"],
  img: ["img"],
  section: ["section", "privetuliki", "astronautHi", "h1"],
  privetuliki: ["privetuliki"],
  astronautHi: ["astronautHi"],
  h1: ["h1"],
  footer: [
    "footer",
    "sphere",
    "loader",
    "button2",
    "button",
    "button3",
    "columns"
  ],
  sphere: ["sphere"],
  loader: ["loader"],
  button2: ["button2"],
  button: ["button"],
  button3: ["button3"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  stars: typeof Stars;
  starsCss: typeof StarsCss;
  navigationBar: typeof NavigationBar;
  img: typeof p.PlasmicImg;
  section: "section";
  privetuliki: typeof Privetuliki;
  astronautHi: typeof AstronautHi;
  h1: "h1";
  footer: "footer";
  sphere: typeof Sphere;
  loader: typeof Loader;
  button2: typeof Button2;
  button: "button";
  button3: typeof Button3;
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    stars: makeNodeComponent("stars"),
    starsCss: makeNodeComponent("starsCss"),
    navigationBar: makeNodeComponent("navigationBar"),
    img: makeNodeComponent("img"),
    section: makeNodeComponent("section"),
    privetuliki: makeNodeComponent("privetuliki"),
    astronautHi: makeNodeComponent("astronautHi"),
    h1: makeNodeComponent("h1"),
    footer: makeNodeComponent("footer"),
    sphere: makeNodeComponent("sphere"),
    loader: makeNodeComponent("loader"),
    button2: makeNodeComponent("button2"),
    button: makeNodeComponent("button"),
    button3: makeNodeComponent("button3"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
