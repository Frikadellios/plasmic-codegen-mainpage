// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f6qpwMfQ9K36cBNMUgXnEq
// Component: 2ar8vnE0Ie
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: f6qpwMfQ9K36cBNMUgXnEq/projectcss
import sty from "./PlasmicSvgAnimationCssOnlyHoverfocusStateStyles.module.css"; // plasmic-import: 2ar8vnE0Ie/css

export type PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantMembers =
  {};
export type PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantsArgs;
export const PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgsType = {};
type ArgPropType =
  keyof PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgsType;
export const PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgProps =
  new Array<ArgPropType>();

export type PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__OverridesType = {
  root?: p.Flex<typeof Embed>;
};

export interface DefaultSvgAnimationCssOnlyHoverfocusStateStylesProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__RenderFunc(props: {
  variants: PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantsArgs;
  args: PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgsType;
  overrides: PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <Embed
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
      code={
        '<div class="o-page">\r\n\t<div class="skill-set">\r\n\t\r\n<!-- UI -->\r\n<a href="#" class="skill-outer ui">\r\n\t<svg  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160">\r\n\t  <g opacity=".87" fill="none" stroke="#fff">\r\n\t\t <text class="text" transform="translate(58 150.11)" font-size="16" fill="#fff" stroke="none" font-family="RobotoMono-Medium,Roboto Mono" font-weight="500">\r\n\t\t\tUI/UX\r\n\t\t </text> \r\n\t\t <path class="rectangle" d="M30.57 22.69h98.86v98.86H30.57z"/>\r\n\t\t <path class="bar" d="M30.57 37.59h98.86"/>\r\n\t\t <circle class="dot3" cx="58.76" cy="29.96" r="3.09"/>\r\n\t\t <circle class="dot2" cx="49.19" cy="29.96" r="3.09"/>\r\n\t\t <circle class="dot1" cx="39.62" cy="29.96" r="3.09"/>\r\n\t\t <rect class="btn" x="55.28" y="67.21" width="49.43" height="24.72" rx="4"/>\r\n\t\t <path class="heart" \t\t\t\tfill="#121212" d="M80 85.57l-1-.86c-3.37-3.06-5.59-5.07-5.59-7.54a3.56 3.56 0 0 1 3.6-3.6A3.9 3.9 0 0 1 80 74.94a3.9 3.9 0 0 1 2.94-1.37 3.56 3.56 0 0 1 3.6 3.6c0 2.47-2.22 4.48-5.59 7.54z"/>\r\n\t  </g>\r\n\t</svg>\r\n</a>\r\n\r\n\r\n<!-- interactive -->\r\n\t\r\n<a href="#" class="skill-outer interactive">\r\n\t<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160">\r\n\t  <g opacity=".87" fill="none" stroke="#fff">\r\n\t\t <text class="text" transform="translate(27.19 146.24)" fill="#fff" stroke="none" font-size="16" font-family="RobotoMono-Medium,Roboto Mono" font-weight="500">\r\n\t\t\tInteractive\r\n\t\t </text>\r\n\t\t <path class="ellipse4"/>\r\n\t\t <path class="ellipse3"/>\r\n\t\t <path class="ellipse2"/>\r\n\t\t <path class="ellipse1"/>\r\n\t\t<path class="ellipse0"/>\r\n\t\t<path class="ellipse" d="M68,61.83a12,12 0 1,0 24,0a12,12 0 1,0 -24,0" stroke-miterlimit="10" fill="#fff" opacity="0.87"/>\r\n\t\t <path class="hand" d="M100.33 82.21a5.82 5.82 0 0 0-3.66.19c-.08-.93-.46-3.07-2.32-3.64a5.83 5.83 0 0 0-3.74.21 3.59 3.59 0 0 0-2.24-3 5.85 5.85 0 0 0-3.64.17v-7.68c0-2-.83-5.44-4-5.44-2.91 0-4 3.25-4 5.44v17.08C75.34 84.12 73 82.13 71.14 82c-3-.24-5.19 1.64-4.59 4.56s3.12 2.75 5 5.14 6.34 9.81 6.37 9.86c.67 1.26 2.49 4.74 2.79 5.62a12 12 0 0 1 .27 3.09.79.79 0 0 0 .22.55.76.76 0 0 0 .54.23h17.18a.77.77 0 0 0 .76-.68 17.08 17.08 0 0 0 0-2.73 5.5 5.5 0 0 1 1.32-3.84 11.61 11.61 0 0 0 1.63-4.52.41.41 0 0 0 0-.11V86.28c.04-.28-.01-3.35-2.3-4.07z" fill="#121212" stroke="#fff" stroke-miterlimit="10"/>\r\n\t\t <path class="bar" d="M96.68 88.8v-6.4"/>\r\n\t\t <path class="bar" d="M90.61 87.29v-8.36"/>\r\n\t\t <path class="bar" d="M84.73 86.74V76.13"/>\r\n\t\t <path class="bar" d="M76.79 87.94v-2.39"/>\r\n\t  </g>\r\n\t</svg>\r\n</a>\r\n\r\n\r\n<!-- graphic -->\r\n<a href="#" class="skill-outer graphic">\r\n\t<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160">\r\n\t  <g opacity=".87" fill="none" stroke="#fff">\r\n\t\t <text id="text" fill="#fff" font-family="RobotoMono-Medium,Roboto Mono" font-size="16px" font-weight="500" stroke="none" transform="translate(46.39 146.24)">\r\n\t\t\tGraphic\r\n\t\t </text>\r\n    \t\t<path class="graphic-shape2" d="M68.54 60.66h60v60h-60z"/>\r\n    \t\t<path class="graphic-middle" d="M68.54 91h.31a30 30 0 0 0 30-30v-.31H68.54z"/>\r\n    \t\t<path class="graphic-shape1" d="M68.85 31a30 30 0 0 1 30 30 30 30 0 0 1-30 30 30 30 0 0 1-30-30 30 30 0 0 1 30-30z"/>\r\n\t\t  \t<circle class="graphic-dot1" cx="" cy="" r="3" fill="#fff" stroke="transparent"/>\r\n\t\t \t<circle class="graphic-dot2" cx="" cy="" r="3" fill="#fff" stroke="transparent"/>\r\n\t  </g>\r\n\t</svg>\r\n</a>\r\n\r\n\r\n<!-- infographic -->\r\n<a class="skill-outer infographic" href="#" class="skill-outer">\r\n\t<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160">\r\n\t  <g opacity=".87" fill="none" stroke="#fff">\r\n\t\t <text class="text" transform="translate(27.19 146.24)" font-size="16" fill="#fff" stroke="none" font-family="RobotoMono-Medium,Roboto Mono" font-weight="500">\r\n\t\t\tInfographic\r\n\t\t </text>\r\n\t\t <path class="left-bottom" d="M43.72 121.55c-7.86-1.45-13.15-4.64-13.15-8.21"/>\r\n\t\t <path class="left-side3" d="M53.18 76.81h22.6v36.53h-22.6z"/>\r\n\t\t <path class="left-side2" d="M53.18 76.81l-9.46 8.22v36.52l9.46-8.21V76.81z"/>\r\n\t\t <path class="left-side1" d="M30.57 76.81v36.53"/>\r\n\t\t <path class="left-top" d="M43.72 85l9.46-8.22h22.6c0-5-10.2-9-22.6-9s-22.6 4.09-22.6 9c0 3.53 5.14 6.74 13.14 8.22"/>\r\n\t\t \r\n\t\t <path class="right-bottom" d="M129.43 111c0 3.57-5.29 6.76-13.15 8.21"/>\r\n\t\t <path class="right-side3" d="M129.43 31.73v79.28"/>\r\n\t\t <path class="right-side2" d="M106.82 31.73l9.46 8.22v79.27l-9.46-8.21V31.73z"/>\r\n\t\t <path class="right-side1" d="M84.22 31.73h22.6V111h-22.6z"/>\r\n\t\t <path class="right-top" d="M116.28 40l-9.46-8.22h-22.6c0-5 10.2-9 22.6-9s22.6 4.08 22.6 9c0 3.53-5.14 6.74-13.14 8.22"/>\r\n\t  </g>\r\n\t</svg>\r\n</a>\r\n\r\n<!-- \ttypo -->\r\n<a href="#" class="skill-outer typo">\r\n\t<svg class="typo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160">\r\n\t  <g pacity=".87" fill="none" stroke="#fff">\r\n\t\t <text class="text" transform="translate(31.99 146.24)" fill="#fff" stroke="none" font-size="16" font-family="RobotoMono-Medium,Roboto Mono" font-weight="500">\r\n\t\t\tTypography\r\n\t\t </text>\r\n\t\t <path class="typo-right-under" fill="#fff" d="M112.06 111.91a6.21 6.21 0 0 1-.4-1.13c-.11-.43-.2-.88-.28-1.36a8.58 8.58 0 0 1-1.31 1.14 9.37 9.37 0 0 1-1.65.92 9.56 9.56 0 0 1-2 .62 10.91 10.91 0 0 1-2.34.2 11.35 11.35 0 0 1-3.73-.63 9 9 0 0 1-2.9-1.67 7.41 7.41 0 0 1-2.53-5.73 7.57 7.57 0 0 1 3.21-6.45c2.11-1.51 5.23-2.23 9.37-2.18h3.81V94.1a3.87 3.87 0 0 0-1.21-3 5.27 5.27 0 0 0-3.59-1.16 4.34 4.34 0 0 0-3.06.86 3.11 3.11 0 0 0-1 2.38l-6.82-.08a7.17 7.17 0 0 1 .78-3.21 8.09 8.09 0 0 1 2.22-2.65 10.89 10.89 0 0 1 3.54-1.78 15.18 15.18 0 0 1 4.76-.62 16.75 16.75 0 0 1 4.47.64 10.88 10.88 0 0 1 3.6 1.74 8 8 0 0 1 2.35 2.94 9.13 9.13 0 0 1 .81 4.08l-.16 11.39a18.69 18.69 0 0 0 .23 3.53 8.61 8.61 0 0 0 .75 2.42v.42zm-6.44-4.91a6.91 6.91 0 0 0 1.91-.22 6.83 6.83 0 0 0 1.61-.62 5.51 5.51 0 0 0 1.24-.88 4.67 4.67 0 0 0 .82-1v-4.56h-3.48a10.37 10.37 0 0 0-2.72.28 5.28 5.28 0 0 0-1.85.83 3.46 3.46 0 0 0-1.07 1.32 4.05 4.05 0 0 0-.37 1.68 3 3 0 0 0 1 2.29 4.12 4.12 0 0 0 2.91.88z"/>\r\n\t\t<path class="typo-left-under" fill="#fff" d="M77.28 94H54.91l-5.38 17.35H41l21.63-67h7.14l21.27 67h-8.46zm-20.07-7.44H75l-8.81-29.09z"/>\r\n\t\t<path class="wave-middle" stroke="transparent" fill="#121212"/>\r\n\t\t<path class="typo-right-top" stroke="#fff" d="M112.06 111.91a6.21 6.21 0 0 1-.4-1.13c-.11-.43-.2-.88-.28-1.36a8.58 8.58 0 0 1-1.31 1.14 9.37 9.37 0 0 1-1.65.92 9.56 9.56 0 0 1-2 .62 10.91 10.91 0 0 1-2.34.2 11.35 11.35 0 0 1-3.73-.63 9 9 0 0 1-2.9-1.67 7.41 7.41 0 0 1-2.53-5.73 7.57 7.57 0 0 1 3.21-6.45c2.11-1.51 5.23-2.23 9.37-2.18h3.81V94.1a3.87 3.87 0 0 0-1.21-3 5.27 5.27 0 0 0-3.59-1.16 4.34 4.34 0 0 0-3.06.86 3.11 3.11 0 0 0-1 2.38l-6.82-.08a7.17 7.17 0 0 1 .78-3.21 8.09 8.09 0 0 1 2.22-2.65 10.89 10.89 0 0 1 3.54-1.78 15.18 15.18 0 0 1 4.76-.62 16.75 16.75 0 0 1 4.47.64 10.88 10.88 0 0 1 3.6 1.74 8 8 0 0 1 2.35 2.94 9.13 9.13 0 0 1 .81 4.08l-.16 11.39a18.69 18.69 0 0 0 .23 3.53 8.61 8.61 0 0 0 .75 2.42v.42zm-6.44-4.91a6.91 6.91 0 0 0 1.91-.22 6.83 6.83 0 0 0 1.61-.62 5.51 5.51 0 0 0 1.24-.88 4.67 4.67 0 0 0 .82-1v-4.56h-3.48a10.37 10.37 0 0 0-2.72.28 5.28 5.28 0 0 0-1.85.83 3.46 3.46 0 0 0-1.07 1.32 4.05 4.05 0 0 0-.37 1.68 3 3 0 0 0 1 2.29 4.12 4.12 0 0 0 2.91.88z"/>\t\r\n\t\t<path class="typo-left-top" d="M77.28 94H54.91l-5.38 17.35H41l21.63-67h7.14l21.27 67h-8.46zm-20.07-7.44H75l-8.81-29.09z"/>\r\n\t  </g>\r\n\t</svg>\r\n</a>\t\r\n\t\t\r\n<!-- code -->\r\n\r\n<a href="#" class="skill-outer code">\r\n\t<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160">\r\n\t  <g opacity=".87" fill="none" stroke="#fff">\r\n\t\t <text class="text" transform="translate(60.8 147.5)" font-size="16" fill="#fff" stroke="none" font-family="RobotoMono-Medium,Roboto Mono" font-weight="500">\r\n\t\t\tCode\r\n\t\t </text>\r\n\t\t <path class="rectangle" transform="rotate(-90 80 72.12)" d="M30.57 22.69h98.86v98.86H30.57z"/>\r\n\t\t <path class="bar" d="M45.46 121.55V22.69"/>\r\n\t\t</g>\r\n\t</svg>\r\n\t<span class="change-letter"></span>\r\n</a>\r\n\t\t\r\n</div>\r\n<!-- /skill-set -->\t\t \r\n</div>' as const
      }
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantsArgs;
    args?: PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames:
            PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgProps,
          internalVariantPropNames:
            PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSvgAnimationCssOnlyHoverfocusStateStyles";
  } else {
    func.displayName = `PlasmicSvgAnimationCssOnlyHoverfocusStateStyles.${nodeName}`;
  }
  return func;
}

export const PlasmicSvgAnimationCssOnlyHoverfocusStateStyles = Object.assign(
  // Top-level PlasmicSvgAnimationCssOnlyHoverfocusStateStyles renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSvgAnimationCssOnlyHoverfocusStateStyles
    internalVariantProps:
      PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__VariantProps,
    internalArgProps: PlasmicSvgAnimationCssOnlyHoverfocusStateStyles__ArgProps
  }
);

export default PlasmicSvgAnimationCssOnlyHoverfocusStateStyles;
/* prettier-ignore-end */
